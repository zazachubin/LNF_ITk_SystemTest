V 14
1
LANG:10001 0 
PANEL,-1 -1 500 434 N "_3DFace" 4
"$dpSetName"
"$maxValue"
"$minValue"
"$sDpName"
E E E E E 1 -1 -1 0  200 65.27272727272728
""0  1
E E 3
"CBRef" "1"
"EClose" E
"dpi" "96.012"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:10001 0 
13 0
"PUSH_BUTTON4"
""
1 40 -90 E E E 1 E 1 E N "_ButtonText" E N "Yellow" E E
 E E
0 0 0 0 0 0
E E E
8
1
LANG:10001 0 

1
"layoutAlignment" "AlignNone"
1
LANG:10001 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0  58 51 181 92

T 
1
LANG:10001 15 createDptsCrate
"#uses \"createDpts.ctl\"
main(mapping event)
{
  Debug(\"==================================\");
  string path = \"/opt2/chen/zynq_test\";
  //int cv1 = system(\"cp -a \"+path+\"/mon_opcua_server/Cacophony/generated/createDpts.ctl \"+path+\"/winccoa-project/itk_interlock_monitor/scripts/libs\");
  //int cv2 = system(\"cp -a \"+path+\"/mon_opcua_server/Cacophony/generated/configParser.ctl \"+path+\"/winccoa-project/itk_interlock_monitor/scripts/libs\");

  createDpts();

}" 0
 E E E
13 1
"PUSH_BUTTON2"
""
1 60 105.9474747474748 E E E 1 E 1 E N "_ButtonText" E N "WF_Warning" E E
 E E
1 0 0 0 0 0
E E E
8
1
LANG:10001 0 

1
"layoutAlignment" "AlignNone"
1
LANG:10001 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0  58 88 181 129

T 
1
LANG:10001 18 createConfigsCrate
"#uses \"configParser.ctl\"
main(mapping event)
{
  parseConfig(
 \"/afs/cern.ch/work/h/hborecka/interlock-files/mon_opcua_server_bin2/bin/config.xml\" /* configFileName */,
 true /*   createDps */,
 true   /* assignAddresses */,
 true   /* continueOnError,*/
);
}
" 0
 E E E
13 2
"PUSH_BUTTON3"
""
1 60 168.5 E E E 1 E 1 E N "_ButtonText" E N "Yellow" E E
 E E
2 0 0 0 0 0
E E E
8
1
LANG:10001 0 

1
"layoutAlignment" "AlignNone"
1
LANG:10001 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0  58 151.5 181 195.5

T 
1
LANG:10001 8 dpDelete
"main(mapping event)
{
  string dpName;

  for (int i = 1; i<5; ++i){
    //Delete Crate DPs
    dpName = \"System1:MonitorController/Crate\" + i + \".\";
    if (dpExists(dpName)){
      DebugN(\"DP exists \", dpName, \" deleting...\");
      dpDelete(dpName);
    }
    //Delete OUT card DPs
    for (int j = 2; j<20; ++j){
      dpName = \"System1:MonitorController/Crate\" + i + \"/DigitalIO_s\" + j + \".\";
      if (dpExists(dpName)){
        DebugN(\"DP exists \", dpName, \" deleting...\");
        dpDelete(dpName);
      }
    }
    //Delete T2I card DPs
    for (int j = 2; j<20; ++j){
      dpName = \"System1:MonitorController/Crate\" + i + \"/T2I_s\" + j + \".\";
      if (dpExists(dpName)){
        DebugN(\"DP exists \", dpName, \" deleting...\");
        dpDelete(dpName);
      }
    }
    //Delete GSS card DPs
    dpName = \"System1:MonitorController/Crate\" + i + \"/GSS.\";
    if (dpExists(dpName)){
      DebugN(\"DP exists \", dpName, \" deleting...\");
      dpDelete(dpName);
    }
    //Delete ILockFPGA card DPs
    dpName = \"System1:MonitorController/Crate\" + i + \"/ILockFPGA.\";
    if (dpExists(dpName)){
      DebugN(\"DP exists \", dpName, \" deleting...\");
      dpDelete(dpName);
    }
    //Delete MonFPGA card DPs
    dpName = \"System1:MonitorController/Crate\" + i + \"/MonFPGA.\";
    if (dpExists(dpName)){
      DebugN(\"DP exists \", dpName, \" deleting...\");
      dpDelete(dpName);
    }
  }
  dpDelete(\"System1:MonitorController.\");

  //Delete DP Types
  dpTypeDelete(\"ITkCrate\");
  dpTypeDelete(\"ITkGSS\");
  dpTypeDelete(\"ITkMonFPGA\");
  dpTypeDelete(\"ITkILockFPGA\");
  dpTypeDelete(\"ITkMonitorController\");
  dpTypeDelete(\"ITkDigitalIO\");
  dpTypeDelete(\"ITkT2I\");

}" 0
 E E E
30 3
"FRAME1"
""
1 30 23 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
3 0 0 0 0 0
E E E
1
1
LANG:10001 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 3 2 1 E 1.307692307692308 0 1.551181102362205 -9.230769230769234 -12.67716535433071 0 E 30 23 161 151
1
LANG:10001 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0 1
LANG:10001 24 Monitor Data Point Setup
30 4
"FRAME2"
""
1 300 23 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
4 0 0 0 0 0
E E E
1
1
LANG:10001 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 3 2 1 E 1.055555555555556 0 1.015228426395939 -46.66666666666667 -3.350253807106592 0 E 300 23 481 221
1
LANG:10001 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0 1
LANG:10001 24 MonFPGA Firmware Upgrade
13 6
"Button1"
""
1 340 180 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 0 0
E E E
0
2
LANG:10001 0 
LANG:1 0 

1
"layoutAlignment" "AlignCenter"
2
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:1 26 Arial,-1,13,5,50,0,0,0,0,0
0  338 178 405 209

T 
2
LANG:10001 2 Ok
LANG:1 5 Apply
"main()
{
	bool negateRange, ignoreOutside, inclusiveMin, inclusiveMax, doesExist, testResult;
	int result;
	dyn_string errorInfo;
	string elementType, currentValue, processedNewValue, desiredValue, minText, maxText;
	anytype comparisonValue;
	unsigned uValue;
	int iValue;
	bool bValue;
	float fValue, minValue, maxValue;
	string sValue;
	
	elementType = dpElementType($sDpName + $dpSetName);
	
	//dpGet($sDpName + $dpSetName, desiredValue);
	desiredValue = NewValue.text;
  	if(elementType != DPEL_STRING)
	{
		if(desiredValue == \"\")
		{
			fwException_raise(	errorInfo, 
								\"ERROR\", 
								\"The new setting value must not be empty\", 
								\"\");
			fwExceptionHandling_display(errorInfo);
			return;
		}
	}

	switch(elementType)
	{
		case DPEL_INT:
		//DebugN(\"int\");
			result = sscanf(desiredValue, \"%d\", iValue);
			processedNewValue = iValue;
			comparisonValue = iValue;
			testResult = TRUE;
			break;
		case DPEL_UINT:
		//DebugN(\"unsigned\");
			result = sscanf(desiredValue, \"%d\", iValue);
			if(iValue < 0)
				result = -1;
			processedNewValue = iValue;
			comparisonValue = iValue;
			testResult = TRUE;
			break;
		case DPEL_FLOAT:
		//DebugN(\"float\");
			result = sscanf(desiredValue, \"%f\", fValue);
			if(strlen(desiredValue) != strlen((string)fValue))
			{
				result = -1;
//DebugN(\"Mismatch\", strlen(desiredValue), strlen((string)fValue));
				break;
			}
			processedNewValue = fValue;
			comparisonValue = fValue;
			testResult = TRUE;
			break;
		case DPEL_BOOL:
		case DPEL_STRING:
		//DebugN(\"string\");
//			result = sscanf(desiredValue, \"%s\", sValue);
			processedNewValue = desiredValue;
			comparisonValue = desiredValue;
			result = 1;
			testResult = FALSE;
			break;
		default:
			fwException_raise(	errorInfo, 
								\"ERROR\", 
								\"Data point element type is not supported (\" + elementType + \")\", 
								\"\");
			fwExceptionHandling_display(errorInfo);
			dpGet($sDpName + $dpSetName, currentValue);
			NewValue.text = currentValue;
			return;
			break;
	}		
//DebugN(result, processedNewValue);
		
	if(result == 0 || result == -1)
	{
		fwException_raise(	errorInfo, 
							\"ERROR\", 
							\"The new setting value has an invalid format\", 
							\"\");
		fwExceptionHandling_display(errorInfo);
		return;
	}

//DebugN($maxValue, $minValue, processedNewValue);

	if(testResult)
	{
		if(isDollarDefined(\"$maxValue\"))
			maxValue = $maxValue;
		else
			maxValue = comparisonValue;
			
		if(isDollarDefined(\"$minValue\"))
			minValue = $minValue;
		else
			minValue = comparisonValue;
//DebugN(minValue, maxValue);	
		if((comparisonValue > maxValue) || (comparisonValue < minValue))
		{
			sprintf(minText, \"%.3f\", minValue);
			sprintf(maxText, \"%.3f\", maxValue);
		
		        if((isDollarDefined(\"$maxValue\")) && (isDollarDefined(\"$minValue\")))
                        {
			  fwException_raise(errorInfo, \"ERROR\",
					    \"The value is outside the valid range: \" + minText + \" to \" + maxText, \"\");
                        }
                        else if(isDollarDefined(\"$maxValue\"))
                        {
			  fwException_raise(errorInfo, \"ERROR\",
					    \"The value must be below \" + maxText, \"\");
                        }
                        else if(isDollarDefined(\"$minValue\"))
                        {
			  fwException_raise(errorInfo, \"ERROR\",
					    \"The value must be above \" + minText, \"\");
                        }
                          
                        fwExceptionHandling_display(errorInfo);		
			return;
		}

		fwPvRange_get(	$sDpName + $dpSetName, doesExist, minValue,
						maxValue, negateRange, ignoreOutside, inclusiveMin, 
						inclusiveMax, errorInfo);
	
		if(dynlen(errorInfo) > 0)
			fwExceptionHandling_display(errorInfo);
	
		if(doesExist)
		{
			if((comparisonValue > maxValue) || (comparisonValue < minValue))
			{
				sprintf(minText, \"%.3f\", minValue);
				sprintf(maxText, \"%.3f\", maxValue);
				
				fwException_raise(	errorInfo, 
									\"ERROR\",
									\"The value is outside the PVSS range: \" + minText + \" to \" + maxText, 
									\"\");
				fwExceptionHandling_display(errorInfo);		
				return;
			}
			else
				dpSet($sDpName + $dpSetName, processedNewValue);
		}
		else
			dpSet($sDpName + $dpSetName, processedNewValue);
	}
	else
		dpSet($sDpName + $dpSetName, processedNewValue);
	
	if(elementType == DPEL_BOOL)
	{	
		dpGet($sDpName + $dpSetName, processedNewValue);
		NewValue.text = processedNewValue;
	}
}" 0
 E E E
29 7
"TEXT_EDIT1"
""
1 290 40 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
7 0 0 0 0 0
E E E
0
1
LANG:10001 0 

1
"layoutAlignment" "AlignNone"
1
LANG:10001 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0  290 40 440 160
15 PVSS.TextEdit.1
0
E30 8
"FRAME3"
""
1 30 243 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
8 0 0 0 0 0
E E E
1
1
LANG:10001 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 3 2 1 E U  0 E 30 243 201 391
1
LANG:10001 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0 1
LANG:10001 23 Reload backend firmware
13 10
"PUSH_BUTTON6"
""
1 70 298 E E E 1 E 1 E N "_ButtonText" E N "Yellow" E E
 E E
10 0 0 0 0 0
E E E
8
1
LANG:10001 0 

1
"layoutAlignment" "AlignNone"
1
LANG:10001 31 Sans Serif,-1,12,5,50,0,0,0,0,0
0  68 288 162 322

T 
1
LANG:10001 6 Reload
E E E E
0
LAYER, 1 
1
LANG:10001 0 
0
LAYER, 2 
1
LANG:10001 0 
0
LAYER, 3 
1
LANG:10001 0 
0
LAYER, 4 
1
LANG:10001 0 
0
LAYER, 5 
1
LANG:10001 0 
0
LAYER, 6 
1
LANG:10001 0 
0
LAYER, 7 
1
LANG:10001 0 
0
0
